generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Product {
  id                 String         @id
  name               String
  price              String
  originalImageUrl   String
  originalProductUrl String
  localImagePath     String?
  description        String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  artist             String?
  dimensions         String?
  featured           Boolean        @default(false)
  medium             String?
  year               String?
  slug               String?
  status             String?        @default("available")
  category           String?
  qrCodeUrl          String?
  stock              Int            @default(1)
  cartItems          CartItem[]
  orderItems         OrderItem[]
  wishlistItems      WishlistItem[]
  enquiries          Enquiry[]

  @@index([name])
  @@index([status])
  @@index([price])
  @@index([stock])
}

model Artist {
  id           String   @id
  name         String   @unique
  slug         String   @unique
  title        String
  biography    String
  portfolioUrl String?
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?

  @@index([name])
  @@index([slug])
}

model TestConnection {
  id        String   @id
  createdAt DateTime @default(now())
  message   String
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  artworkId   String?
  artworkName String?
  artistName  String?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([type])
  @@index([createdAt])
}

model Enquiry {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  artworkId   String?
  artworkName String?
  status      String   @default("new")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  productId   String?
  user        User?    @relation(fields: [userId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([userId])
  @@index([productId])
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String
  name             String
  phone            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  emailVerified    DateTime?
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  stripeCustomerId String?        @unique
  addresses        Address[]
  cartItems        CartItem[]
  enquiries        Enquiry[]
  orders           Order[]
  wishlistItems    WishlistItem[]

  @@index([email])
  @@index([stripeCustomerId])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  line1      String
  line2      String?
  city       String
  county     String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@index([userId])
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  orderNumber       String      @unique
  stripePaymentId   String?     @unique
  stripeSessionId   String?     @unique
  status            String      @default("pending")
  subtotal          Float
  tax               Float       @default(0)
  shipping          Float       @default(0)
  total             Float
  currency          String      @default("GBP")
  shippingAddressId String?
  billingAddressId  String?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  paidAt            DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  shippingAddress   Address?    @relation(fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  items             OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  total     Float
  metadata  Json?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}
